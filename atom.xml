<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yangmiao.fun/"/>
  <updated>2018-09-25T14:24:39.854Z</updated>
  <id>http://yangmiao.fun/</id>
  
  <author>
    <name>YangMiao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>我眼中的区块链</title>
    <link href="http://yangmiao.fun/2018/09/25/%E6%88%91%E7%9C%BC%E4%B8%AD%E7%9A%84%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    <id>http://yangmiao.fun/2018/09/25/我眼中的区块链/</id>
    <published>2018-09-25T14:15:51.449Z</published>
    <updated>2018-09-25T14:24:39.854Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>区块链是什么？在计算机及互联网技术高速发展的如今，各种各样的新技术层出不穷，而区块链在这个大环境中仍然吸引了人们最大的关注。所以对我们将要从事计算机行业的学生来说关注了解区块链是很有必要的。</p><h2 id="区块链是什么？"><a href="#区块链是什么？" class="headerlink" title="区块链是什么？"></a>区块链是什么？</h2><p>区块链技术：是指通过去中心化的方式集体维护一个可靠数据库的技术方案。该技术方案主要让区块（Block）通过密码学方法相关联起来，每个数据块包含了一定时间内的系统全部数据信息，并且生成数字签名以验证信息的有效性并链接到下一个数据块形成一条主链（Chain）。<br>相关重要概念：<br>区块：是区块链中的一条记录，包含并确认待处理的交易。<br>挖矿：指通过计算形成新的区块，是交易的支持者利用自身的计算机硬件为网络做数学计算进行交易确认和提高安全性的过程。以比特币为例：交易支持者（矿工）在电脑上运行比特币软件不断计算软件提供的复杂的密码学问题来保证交易的进行。作为对他们服务的奖励，矿工可以得到他们所确认的交易中包含的手续费，以及新创建的比特币。<br>对等式网络：是指通过允许单个节点与其他节点直接交互，从而实现整个系统像有组织的集体一样运作的系统。以比特币为例：网络以这样一种方式构建——每个用户都在传播其他用户的交易。而且重要的是，不需要银行或其他金融机构作为第三方。<br>哈希散列：是密码学里的经典技术，把任意长度的输入通过哈西算法，变换成固定长度的由字母和数字组成的输出。<br>数字签名：是一个让人可以证明所有权的数学机制。<br>私钥：是一个证明你有权从一个特定的钱包消费电子货币的保密数据块，是通过数字签名来实现的 。<br>双重消费：指用户试图非法将电子货币同时支付给两个不同的收款人，是电子货币的最大风险之一。</p><h2 id="一种支持比特币运行的底层技术"><a href="#一种支持比特币运行的底层技术" class="headerlink" title="一种支持比特币运行的底层技术"></a>一种支持比特币运行的底层技术</h2><p>区块链的概念首次在2008年末由中本聪发表在比特币论坛中的论文《Bitcoin: A Peer-to-Peer Electronic Cash System》提出。论文中区块链技术是构建比特币数据结构与交易信息加密传输的基础技术，该技术实现了比特币的挖矿与交易。中本聪认为：第一，借助第三方机构来处理信息的模式拥有点与点之间缺乏信任的内生弱点，商家为了提防自己的客户，会向客户索取完全不必要的信息，但仍然不能避免一定的欺诈行为；第二，中介机构的存在，增加了交易成本，限制了实际可行的最小交易规模；第三，数字签名本身能够解决电子货币身份问题，如果还需要第三方支持才能防止双重消费，则系统将失去价值。基于以上三点现存的问题，中本聪在区块链技术的基础上，创建了比特币。<br>区块链技术作为比特币的基础性技术，具有高度透明、去中心化、去信任、集体维护（不可更改）、匿名等性质。这些性质体现了分布式自治的理念，逐渐受到拥有创新意识的金融机构的广泛关注。DAC，就是通过一系列公开公正的规则，以无人干预和管理的情况下自主运行的组织机构。这些规则往往会以开源软件的形式出现，每个人可以通过支付手段获得不定形式的回报，分享收益，参与系统的成长。</p><h2 id="我的一些看法"><a href="#我的一些看法" class="headerlink" title="我的一些看法"></a>我的一些看法</h2><ol><li>从目前了解到的大势来看，区块链正在进入新时代，正在完成“基于持续上涨的炒币”逻辑到“深挖技术价值落地生产应用”逻辑的转换；区块链技术正在被吸收内化，终极导向是我国经济增长方式的转型。数字经济会是未来三十年中国经济增长的新动力引擎，区块链技术将与其他各类信息技术一道为社会主义新时代建设，做出贡献。</li><li>早期的区块链爱好者的视角应该打开，从纯粹的“百倍币”、“千倍币”的财富暴涨的经历中走出。区块链的技术的属性被各行各业吸纳以后，币的属性有可能会被削弱，最大的收入增长可能不一定来自于谁再能够以低价抄底更多的币，然后暴涨从而财富自由，而在于，谁能够把区块链技术的解决方案落地到各行各业，从而获得更多的客户群体，从中涌现出新企业与新商业。</li><li>区块链可作为资产配置的属性会在社会上有更广泛的传播，会有更多的人选择把个人或者家庭资产配置在区块链中；但是由于在金融稳定的大前提下，区块链的投机属性会被抑制。也就是，区块链在社会上的广泛应用，未必能完全传导到现有的资产价格当中。或者更准确的说，区块链技术的应用与区块链二级市场的价值走向，不会呈现非常明显的相关关系。</li><li>区块链广泛应用以后，区块链安全事件会出现大幅增长的趋势；尤其对于新兴的区块链应用，由于安全力量薄弱，开发人员安全意识淡薄，更容易遭受安全攻击。与此同时，针对普通用户的区块链诈骗、钓鱼以及定制的APT攻击，也会地出现大幅增长。在安全威胁增加的情况下，功能越多、业务逻辑越复杂的公链，会面临更多重的安全威胁与挑战。</li><li>监管会逐渐渗透到区块链的各个方向。由于区块链的不可篡改属性，针对公链上出现的非法信息问题，是公链治理的一个重要方向。对于国内公链的区块链创业者，需要担当更多的主体责任。<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2>对于我们这些学生来说，关注未来国家前进方向的同学，研习并且关注一下区块链技术。这并不是为了获得一个十倍或者百倍的炒币收益，而是跟进“以密码学为基础的去中心化”的区块链信息技术，如何与传承千年的人性、权力以及文化的互动与较量，这会成为一段波澜壮阔的历史。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;区块链是什么？在计算机及互联网技术高速发展的如今，各种各样的新技术层出不穷，而区块链在这个大环境中仍然吸引了人们最大的关注。所以对我们将要从
      
    
    </summary>
    
    
      <category term="区块链 比特币" scheme="http://yangmiao.fun/tags/%E5%8C%BA%E5%9D%97%E9%93%BE-%E6%AF%94%E7%89%B9%E5%B8%81/"/>
    
  </entry>
  
  <entry>
    <title>git常用指令总结</title>
    <link href="http://yangmiao.fun/2018/09/16/git%E7%9A%84%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%B8%B8%E7%94%A8git%E6%8C%87%E4%BB%A4%E7%9A%84%E6%80%BB%E7%BB%93/"/>
    <id>http://yangmiao.fun/2018/09/16/git的安装以及常用git指令的总结/</id>
    <published>2018-09-16T15:08:55.330Z</published>
    <updated>2018-09-16T15:14:46.658Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。git大大可以方便我们代码的管理。<br>在学习安卓应用开发的过程中我们需要经常用到git功能，所以学好git是非常重要的。</p><h1 id="git的安装与配置"><a href="#git的安装与配置" class="headerlink" title="git的安装与配置"></a>git的安装与配置</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在使用Git前我们需要先安装 Git。Git 目前支持 Linux/Unix、Solaris、Mac和 Windows 平台上运行。</p><p>Git 各平台安装包下载地址为：<a href="http://git-scm.com/downloads" target="_blank" rel="noopener">http://git-scm.com/downloads</a><br>我是在windows平台上安装的git，其他平台的安装可以参考网页Git <a href="http://www.runoob.com/git/git-install-setup.html" target="_blank" rel="noopener">安装配置 | 菜鸟教程</a></p><p>windows平台我们可以直接进入<a href="https://gitforwindows.org/" target="_blank" rel="noopener">Git for Windows</a><br><img src="https://i.loli.net/2018/09/16/5b9e4d2cb79fd.png" alt="此处输入图片的描述"><br>点击下载exe文件，安装即可。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>Git 提供了一个叫做 git config 的工具，专门用来配置或读取相应的工作环境变量。<br>这些环境变量，决定了 Git 在各个环节的具体工作方式和行为。这些变量可以存放在以下三个不同的地方：</p><ul><li>/etc/gitconfig 文件：系统中对所有用户都普遍适用的配置。若使用 git config 时用 –system 选项，读写的就是这个文件。</li><li>~/.gitconfig 文件：用户目录下的配置文件只适用于该用户。若使用 git config 时用 –global 选项，读写的就是这个文件。</li><li><p>当前项目的 Git 目录中的配置文件（也就是工作目录中的 .git/config 文件）：这里的配置仅仅针对当前项目有效。每一个级别的配置都会覆盖上层的相同配置，所以 .git/config 里的配置会覆盖 /etc/gitconfig 中的同名变量。</p><p>在 Windows 系统上，Git 会找寻用户主目录下的 .gitconfig 文件。主目录即 $HOME 变量指定的目录，一般都是 C:\Documents and Settings\$USER。</p></li></ul><p>此外，Git 还会尝试找寻 /etc/gitconfig 文件，只不过看当初 Git 装在什么目录，就以此作为根目录来定位。</p><p>配置个人的用户名称和电子邮件地址：</p><pre><code>$ git config --global user.name &quot;runoob&quot;$ git config --global user.email test@runoob.com</code></pre><p>如果用了 –global 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。</p><p>如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 –global 选项重新配置即可，新的设定保存在当前项目的 .git/config 文件里。</p><h1 id="git的常用指令"><a href="#git的常用指令" class="headerlink" title="git的常用指令"></a>git的常用指令</h1><h2 id="创建新仓库"><a href="#创建新仓库" class="headerlink" title="创建新仓库"></a>创建新仓库</h2><p>创建新文件夹，打开，然后执行 <code>git init</code>创建新的 git 仓库。</p><h2 id="克隆仓库"><a href="#克隆仓库" class="headerlink" title="克隆仓库"></a>克隆仓库</h2><p>如果是本地仓库，则输入</p><pre><code>git clone /path/to/repository</code></pre><p>如果说远端服务器上的仓库，则为</p><pre><code>git clone username@host:/path/to/repository</code></pre><h2 id="添加和提交文件"><a href="#添加和提交文件" class="headerlink" title="添加和提交文件"></a>添加和提交文件</h2><p> 我们的本地仓库由 git 维护的三部分组成。第一部分是 工作目录，它持有实际文件；第二部分是暂存区（Index），它临时保存我们的改动；最后是 HEAD，它指向我们最后一次提交的结果。<br> <img src="https://i.loli.net/2018/09/16/5b9e604a72a2b.png" alt="git"></p><p>当我们需要把文件添加到缓存区时，我们输入</p><pre><code>git add &lt;filename&gt;git add *</code></pre><p>这是 第一步，然后我们输入命令以实际提交改动：</p><pre><code>git commit -m &quot;代码提交信息&quot;</code></pre><p>这样我们的改动就已经被HEAD所保存，但是远端仓库还没有更改。首先我们需要添加远程仓库</p><pre><code>git remote add [shortname] [url]</code></pre><p>以Github为例本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以我们需要配置验证信息，使用以下命令生成SSH Key：</p><pre><code>$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</code></pre><p>后面的 <a href="mailto:your_email@youremail.com" target="_blank" rel="noopener">your_email@youremail.com</a><br>改为github注册的邮箱，之后会要求确认路径和输入密码。成功的话会在~/下生成.ssh文件夹，打开里面的 id_rsa.pub文件，复制里面的 key。然后登陆我们的 github账号，进入 Account =&gt; Settings（账户配置）。选择 SSH and GPG keys，然后点击 New SSH key 按钮,title 设置标题，粘贴在电脑上生成的 key。<br><img src="http://www.runoob.com/wp-content/uploads/2015/03/106AD534-A38A-47F3-88A3-B7BE3F2FEEF1.jpg" alt="此处输入图片的描述"><br>然后我们可以输入<br>    git remote add origin <server><br>将我们的仓库连接到某个远程服务器，此时我们在输入</server></p><pre><code>git push origin master</code></pre><p>我们就可以将仓库改动提交到远端仓库了</p><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>分支是用来将特性开发绝缘开来的。在你创建仓库的时候，master 是“默认的”分支。在其他分支上进行开发，完成后再将它们合并到主分支上。<br>创建一个叫做“feature_x”的分支，并切换过去：</p><pre><code>git checkout -b feature_x</code></pre><p>切换回主分支：</p><pre><code>git checkout master</code></pre><p>再把新建的分支删掉：</p><pre><code>git branch -d feature_x</code></pre><p>我们必须将分支推送到远端仓库，不然该分支就是 不为他人所见的：</p><pre><code>git push origin &lt;branch&gt;</code></pre><h2 id="更新与合并"><a href="#更新与合并" class="headerlink" title="更新与合并"></a>更新与合并</h2><p>更新你的本地仓库至最新改动，执行：</p><pre><code>git pull</code></pre><p>以在你的工作目录中 获取（fetch） 并 合并（merge） 远端的改动。<br>要合并其他分支到当前分支（例如 master），执行：</p><pre><code>git merge &lt;branch&gt;</code></pre><p>在这两种情况下，git 都会尝试去自动合并改动。遗憾的是，这可能并非每次都成功，并可能出现冲突（conflicts）。 这时候就需要修改这些文件来手动合并这些冲突（conflicts）。改完之后，需要执行如下命令以将它们标记为合并成功：</p><pre><code>git add &lt;filename&gt;</code></pre><p>在合并改动之前，可以使用如下命令预览差异：</p><pre><code>git diff &lt;source_branch&gt; &lt;target_branch&gt;</code></pre><h2 id="替换本地改动"><a href="#替换本地改动" class="headerlink" title="替换本地改动"></a>替换本地改动</h2><p>假如我们操作失误，我们可以使用如下命令替换掉本地改动：</p><pre><code>git checkout -- &lt;filename&gt;</code></pre><p>此命令会使用 HEAD 中的最新内容替换掉我们工作目录中的文件。已添加到暂存区的改动以及新文件都不会受到影响。<br>假如我们想丢弃本地的所有改动与提交，可以到服务器上获取最新的版本历史，并将本地主分支指向它</p><pre><code>git fetch origingit reset --hard origin/master  </code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>学会使用git非常非常非常重要！</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol><li><a href="http://www.runoob.com/manual/git-guide/" target="_blank" rel="noopener">git 简明指南</a></li><li><a href="http://www.runoob.com/git/git-tutorial.html" target="_blank" rel="noopener">Git 教程 | 菜鸟教程</a></li><li><a href="https://blog.csdn.net/dickdick111/article/details/82500009" target="_blank" rel="noopener">Git日常使用总结</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。git大大可以方便我们代码的管理。&lt;br&gt;在学习安卓应用开发的过
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>服务计算学习（一）</title>
    <link href="http://yangmiao.fun/2018/09/15/%E6%9C%8D%E5%8A%A1%E8%AE%A1%E7%AE%97%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yangmiao.fun/2018/09/15/服务计算学习（一）/</id>
    <published>2018-09-14T16:45:46.143Z</published>
    <updated>2018-09-25T14:17:17.155Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h1><p>1.初步了解虚拟化技术，理解云计算的相关概念</p><p>2.为后续课程提供统一的编程与实验环境</p><p>3.理解系统工程师面临的困境</p><h1 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h1><p>使用个人电脑，win10系统下使用VirtualBox创建centOS虚拟机</p><h1 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h1><h2 id="下载VirtualBox"><a href="#下载VirtualBox" class="headerlink" title="下载VirtualBox"></a>下载VirtualBox</h2><p>首先前往<a href="https://www.virtualbox.org/" target="_blank" rel="noopener">VirtualBox官网</a>下载VirtualBox最新版本<br><img src="https://i.loli.net/2018/09/10/5b95518467cc2.png" alt="VirtualBox官网"></p><h2 id="下载CentOS"><a href="#下载CentOS" class="headerlink" title="下载CentOS"></a>下载CentOS</h2><p>前往<a href="https://www.centos.org/download/" target="_blank" rel="noopener">CentOS官网</a>选择Torrent 国内源下载，本实验下载Minimal版本即可<br><img src="https://i.loli.net/2018/09/10/5b95520441135.png" alt="下载Minimal版本"></p><h2 id="使用VirtualBox创建虚拟机"><a href="#使用VirtualBox创建虚拟机" class="headerlink" title="使用VirtualBox创建虚拟机"></a>使用VirtualBox创建虚拟机</h2><p>安装VirtualBox后攒创建centos虚拟机<br><img src="https://i.loli.net/2018/09/10/5b9553522187e.png" alt="创建centos虚拟机"></p><p>VirtualBox菜单 ：管理 -&gt; 主机网络管理器，创建一块虚拟网卡，网址分配：192.168.100.1/24</p><p><img src="https://i.loli.net/2018/09/10/5b955721e45dd.png" alt="创建一块虚拟网卡"><br>配置网卡2如图所示</p><p><img src="https://i.loli.net/2018/09/10/5b955671e59b2.png" alt="配置网卡"></p><p><img src="https://i.loli.net/2018/09/15/5b9d08b45be61.png" alt="选择语音"><br>这里选择中文，点击继续进入下一步</p><p><img src="https://i.loli.net/2018/09/15/5b9d0a077e0ff.png" alt="开始安装"><br>这里点击开始安装，开始安装</p><p> 等待一段时间后即可安装成功，之后重启虚拟机</p><p>重启虚拟机后，我们更新和安装一些必要的软件</p><pre><code>yum install wegtyum updateyum groupinstall &quot;X Window System&quot;yum groupinstall &quot;GNOME Desktop&quot;systemctl set-default multi-user.target  //设置成命令模式systemctl set-default graphical.target  //设置成图形模式shutdown -r now #重启</code></pre><p>此时我们重启后看到的应该是图形化界面了。</p><p><img src="https://i.loli.net/2018/09/15/5b9d1253b66e8.png" alt="图形化界面"></p><p>配置网络信息<br><img src="https://i.loli.net/2018/09/15/5b9d18c210d4b.png" alt="配置网络"><br>点击有线设置<br><img src="https://i.loli.net/2018/09/15/5b9d19d9709db.png" alt="有线设置"><br>我们要修改的是第二张网卡，我们修改其ipv4地址如下<br><img src="https://i.loli.net/2018/09/15/5b9d1b722d2d9.png" alt="设置地址"><br>然后我们先关闭虚拟机，在vritualBox管理界面选择刚才创建的虚拟机选中刚才的虚拟机，打开设置，选择如下界面，设置远程桌面服务器口。<br><img src="https://i.loli.net/2018/09/15/5b9d1e07c61f8.png" alt="设置远程桌面服务器口"><br>我们设置端口为50001</p><h1 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h1><p>我们无界面启动虚拟机，就可以通过远程桌面连接至虚拟机，如图所示</p><p><img src="https://i.loli.net/2018/09/15/5b9d204d6833c.png" alt="此处输入图片的描述"></p><p>如果我们需要多个虚拟机的话，那么，刚刚配置的虚拟机，就可以作为 base，通过vritualBox的克隆功能克隆这个虚拟机。链接克隆和完整克隆都可以，克隆完毕后我们进入新的虚拟机系统，查看ip，同样可以远程连接到这个虚拟机系统上面去。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;实验目的&quot;&gt;&lt;a href=&quot;#实验目的&quot; class=&quot;headerlink&quot; title=&quot;实验目的&quot;&gt;&lt;/a&gt;实验目的&lt;/h1&gt;&lt;p&gt;1.初步了解虚拟化技术，理解云计算的相关概念&lt;/p&gt;
&lt;p&gt;2.为后续课程提供统一的编程与实验环境&lt;/p&gt;
&lt;p&gt;3.理解系
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>搭建我的个人博客</title>
    <link href="http://yangmiao.fun/2018/09/14/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yangmiao.fun/2018/09/14/使用hexo搭建个人博客/</id>
    <published>2018-09-14T12:46:25.000Z</published>
    <updated>2018-09-16T15:14:41.879Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>大学已经过去一半多了，自己很不满足之前的学习效率，所以决定建立一个自己的博客网站，俗话说 “ 好记性不如烂笔头嘛 ”。</p><h1 id="搭建思路"><a href="#搭建思路" class="headerlink" title="搭建思路"></a>搭建思路</h1><h2 id="选择hexo"><a href="#选择hexo" class="headerlink" title="选择hexo"></a>选择<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo</a></h2><p><img src="https://i.loli.net/2018/09/15/5b9cbbb53e977.png" alt="heox首页"></p><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo使用Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。hexo安装和使用非常方便，效果也非常不错。</p><h2 id="利用github-pages"><a href="#利用github-pages" class="headerlink" title="利用github pages"></a>利用github pages</h2><p>GitHub Pages本用于介绍托管在GitHub的项目，不过，由于他的空间免费稳定，用来做搭建一个博客再好不过了。<br>为什么用github pages？</p><h3 id="1-github-pages完全免费，管理方便"><a href="#1-github-pages完全免费，管理方便" class="headerlink" title="1. github pages完全免费，管理方便"></a>1. github pages完全免费，管理方便</h3><h3 id="2-学会使用git和github对程序员非常重要"><a href="#2-学会使用git和github对程序员非常重要" class="headerlink" title="2. 学会使用git和github对程序员非常重要"></a>2. 学会使用git和github对程序员非常重要</h3><h2 id="使用阿里云购买单独域名"><a href="#使用阿里云购买单独域名" class="headerlink" title="使用阿里云购买单独域名"></a>使用<a href="https://cn.aliyun.com/?spm=5176.8097504.1146454.1.a1ce6fb5Y7atTA" target="_blank" rel="noopener">阿里云</a>购买单独域名</h2><p>github pages的默认网站会是</p><pre><code>用户名.github.io</code></pre><p>是不是感觉很逊。那么我们可以购买属于自己的域名，国内的阿里云和腾讯云都是不错的选择，这里我选择了阿里云。</p><h1 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h1><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>我安装的时候参考了系列视频<a href="https://www.youtube.com/watch?v=Ud1xAhu7t2Y&amp;list=PLXbU-2B80FvDjD_RiuNwsSQ4eF8pkwAIa" target="_blank" rel="noopener">快速使用 Hexo 搭建个人博客</a>（需翻墙）以及<a href="https://www.cnblogs.com/visugar/p/6821777.html" target="_blank" rel="noopener">hexo从零开始到搭建完整</a>。我的安装环境是win10，对于mac用户，请参考网上其他教程。</p><h3 id="安装git以及Node-js"><a href="#安装git以及Node-js" class="headerlink" title="安装git以及Node.js"></a>安装<a href="https://git-scm.com/" target="_blank" rel="noopener">git</a>以及<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a></h3><h3 id="打开cmd，输入npm-install-g-hexo-cli即可完成hexo安装"><a href="#打开cmd，输入npm-install-g-hexo-cli即可完成hexo安装" class="headerlink" title="打开cmd，输入npm install -g hexo-cli即可完成hexo安装"></a>打开cmd，输入<code>npm install -g hexo-cli</code>即可完成hexo安装</h3><h3 id="安装-Hexo-后执行下列命令，Hexo将会在指定文件夹中新建所需要的文件。"><a href="#安装-Hexo-后执行下列命令，Hexo将会在指定文件夹中新建所需要的文件。" class="headerlink" title="安装 Hexo 后执行下列命令，Hexo将会在指定文件夹中新建所需要的文件。"></a>安装 Hexo 后执行下列命令，Hexo将会在指定文件夹中新建所需要的文件。</h3><blockquote><p>hexo init <folder><br>cd <folder><br>npm install</folder></folder></p></blockquote><h3 id="新建完成后，指定文件夹的目录如下"><a href="#新建完成后，指定文件夹的目录如下" class="headerlink" title="新建完成后，指定文件夹的目录如下"></a>新建完成后，指定文件夹的目录如下</h3><blockquote><p>.<br>├── _config.yml<br>├── package.json<br>├── scaffolds<br>├── source<br>|   ├── _drafts<br>|   └── _posts<br>└── themes</p></blockquote><p><img src="https://i.loli.net/2018/09/15/5b9ccdeaea293.png" alt="此处输入图片的描述"><br>_config.yml存储了网站的 配置 信息，可以在此配置大部分的参数。<br>source资源文件夹是存放用户资源的地方。<br>themes存储主题。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在 _config.yml 中修改大部份的配置。可以参考网页<a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">配置|hexo</a>。</p><h3 id="一些常用的指令"><a href="#一些常用的指令" class="headerlink" title="一些常用的指令"></a>一些常用的指令</h3><p>可以参考网页<a href="https://hexo.io/zh-cn/docs/commands" target="_blank" rel="noopener">指令|hexo</a>。</p><p>init</p><pre><code>$ hexo init [folder]</code></pre><p>新建一个网站</p><p>new</p><pre><code>$ hexo new [layout] &lt;title&gt;</code></pre><p>新建一篇文章</p><p>generate</p><pre><code>$ hexo generate</code></pre><p>生成静态文件，添加-d文件生成后立即部署网站，可以简写为</p><pre><code>$ hexo g</code></pre><p>  server</p><pre><code>$ hexo server</code></pre><p>启动服务器。默认情况下，访问网址为：<a href="http://localhost:4000/。" target="_blank" rel="noopener">http://localhost:4000/。</a></p><p>deploy</p><pre><code>$ hexo deploy</code></pre><p>部署网站。</p><h3 id="生成网站效果"><a href="#生成网站效果" class="headerlink" title="生成网站效果"></a>生成网站效果</h3><p><img src="https://i.loli.net/2018/09/15/5b9cd17fc0a9e.png" alt="此处输入图片的描述"></p><h3 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h3><p>我们可以在<a href="https://hexo.io/themes/" target="_blank" rel="noopener">Themes|Hexo</a>选择喜欢的主题进行配置</p><h2 id="将配置好的网站配置到github-pages"><a href="#将配置好的网站配置到github-pages" class="headerlink" title="将配置好的网站配置到github pages"></a>将配置好的网站配置到github pages</h2><ul><li>首先我们需要一个github账号，如果没有的话先创建一个。</li><li>然后我们创建一个repo，名称为yourname.github.io,其中yourname是你的github名称，按照这个规则创建才有用</li><li>打开git bash，配置github账户信息<br>-<blockquote><p>git config –global user.name “YourName”<br>git config –global user.email “YourEmail”</p></blockquote></li></ul><p>将YourName和YourEail都替换成你自己的</p><p>在github中输入</p><blockquote><p>ssh-keygen -t rsa -C “<a href="mailto:youremail@example.com" target="_blank" rel="noopener">youremail@example.com</a></p></blockquote><p>生成ssh，在.ssh文件中找到<code>id_rsa.pub</code>文件，用记事本打开，将里面的内容复制到github中</p><p><img src="https://i.loli.net/2018/09/15/5b9cd85f2e8c2.png" alt="github">!    <a href="https://i.loli.net/2018/09/15/5b9cd895b461f.png" target="_blank" rel="noopener">github</a></p><p><img src="https://i.loli.net/2018/09/15/5b9cd909e467a.png" alt="github"></p><p>最后一步，修改_config.yml文件的一些配置，</p><blockquote><p>deploy:<br>  type: git<br>  repo: <a href="https://github.com/YourgithubName/YourgithubName.github.io.git" target="_blank" rel="noopener">https://github.com/YourgithubName/YourgithubName.github.io.git</a><br>  branch: master</p></blockquote><p>然后进入你的blog目录，分别执行以下命令：</p><blockquote><p>hexo clean<br>hexo generate<br>hexo server</p></blockquote><p>注意deploy的过程中要输入你的username及passward。</p><p>在浏览器中输入<a href="http://yourgithubname.github.io就可以看到个人博客" target="_blank" rel="noopener">http://yourgithubname.github.io就可以看到个人博客</a></p><h2 id="绑定个人域名"><a href="#绑定个人域名" class="headerlink" title="绑定个人域名"></a>绑定个人域名</h2><p>绑定域名我是在阿里云购买的<a href="yangmiao.fun">yangmiao.fun</a>。<br>首先我们再github你的博客项目中添加一个叫CNAME的文件<br><img src="https://i.loli.net/2018/09/15/5b9cdf6203db2.png" alt="CNAME"><br>在文件中添加你的域名，比如我是</p><pre><code>yangmiao.fun</code></pre><p>然后我们进入阿里云网站，找到自己刚刚购买的域名，点击解析，在解析域名中添加自己博客的ipv4地址，该地址可以通过在cmd中输入以下内容找到</p><pre><code>ping yangmiao.fun</code></pre><p>之后我们就可以通过该地址访问我们的博客了</p><h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><p><img src="https://i.loli.net/2018/09/15/5b9ce3e4e3a17.png" alt="yangmiao.fun"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>学习的过程很辛苦，但是我们唯有这一条路可走。</li><li>第一次写博客，有很多不足的地方。欢迎各位大佬来指正和交流。</li><li>markdown的编写可以参考网上的资料，博主也在学习中。</li></ol><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol><li><a href="https://www.youtube.com/watch?v=Ud1xAhu7t2Y&amp;list=PLXbU-2B80FvDjD_RiuNwsSQ4eF8pkwAIa" target="_blank" rel="noopener">快速使用 Hexo 搭建个人博客</a></li><li><a href="https://www.cnblogs.com/visugar/p/6821777.html" target="_blank" rel="noopener">hexo从零开始到搭建完整</a></li><li><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">文档|hexo</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;大学已经过去一半多了，自己很不满足之前的学习效率，所以决定建立一个自己的博客网站，俗话说 “ 好记性不如烂笔头嘛 ”。&lt;/p&gt;
&lt;h1 id
      
    
    </summary>
    
    
  </entry>
  
</feed>
